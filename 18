import re


class Field(dict):
    def __init__(self):
        self.val = []

    def normal_key(self, key):
        pattern1 = re.compile(r'\d+[a-zA-z]$')
        pattern2 = re.compile(r'[a-zA-z]\d+$')
        self.key = key
        counter = 0
        if type(self.key) == tuple:
            self.key = list(self.key)
            for i in self.key:
                if type(i) == int and int(i) > 0:
                    self.key[counter] = str(i)
                elif type(i) == str:
                    self.key[counter] = str(i)
                else:
                    raise ValueError

                counter += 1

            self.key = ''.join(self.key).upper()
        if type(self.key) == str:
            self.key = ''.join(self.key).upper()
        else:
            raise TypeError

        if pattern1.match(self.key):
            return self.key
        elif pattern2.match(self.key):
            return self.key[::-1]
        else:
            raise ValueError

    def __getitem__(self, key):
        return super(Field, self).__getitem__(self.normal_key(key))

    def __setitem__(self, key, value):
        super(Field, self).__setitem__(self.normal_key(key), value)

    def __delitem__(self, key):
        super(Field, self).__delitem__(self.normal_key(key))

    def __missing__(self, key):
        return None

    def __contains__(self, item):
        return self[item] != self.__missing__(1)

    def __iter__(self):
        return (value for value in self.values())
